import java.util.StringTokenizer;

public class TestInfix2PostfixCalculator {
	
	public static void main(String[] args) {
		
		String input = "12*3 - 4 + (18/6)";
		String postfix = convertPostFix(input);
		int result = getPostFix(postfix);
		System.out.println(result);
	}
	
	private static String convertPostFix(String infix) {
		infix = infix.replaceAll("\\s", "");
		
		StackReferenceBased opStack = new StackReferenceBased();
		char curr;
		String output = "";
		int i = 0;
		
		while (i != infix.length()) {
			curr = infix.charAt(i);
			if (precedence(curr) == -1) {
				int j = i + 1;
				String operand = infix.substring(i, j);
				while (precedence(infix.charAt(j)) == -1) {
					j++;
					operand = infix.substring(i, j);
				}
				i = j;
				output += " " + operand;
 			} else {
				if (curr == ')') {
					Object o;
					while ((o = opStack.peek()).toString().charAt(0) == '(') {
						char c = o.toString().charAt(0);
						if (precedence(c) != 1)
							output += " " + c;
					}
				} else {
					while (!opStack.isEmpty() && curr != '(' && precedence(opStack.peek().toString().charAt(0)) >= precedence(curr)) {
						char c = opStack.pop().toString().charAt(0);
						if (precedence(c) != 1)
							output += " " + c;
					}
					opStack.push(curr);
				}
				i++;
			}
		}
		while (!opStack.isEmpty()) {
			char c = opStack.pop().toString().charAt(0);
			if (precedence(c) != 1)
				output += " " + c;
		}
		return output.trim();
	}
	
	private static int getPostFix(String postfix) {
		System.out.println(postfix);
		StringTokenizer tokens = new StringTokenizer(postfix);
		StackReferenceBased stack = new StackReferenceBased();
		while (tokens.hasMoreTokens()) {
			String curr = tokens.nextToken();
			if (precedence(curr.charAt(0)) != -1)
				stack.push(doMath(stack.pop(), stack.pop(), curr.charAt(0)));
			else
				stack.push(curr);
		}
		return Integer.valueOf(stack.pop().toString());
	}
	
	private static int doMath(Object a, Object b, char op) {
		int x = Integer.valueOf(a.toString());
		int y = Integer.valueOf(b.toString());
		switch (op) {
			case '+':
				return x + y;
			case '-':
				return x - y;
			case '*':
				return x * y;
			case '/':
				return x / y;
		}
		return -1;
	}
	
	private static int precedence(char op) {
		if (op == '(' || op == ')')
			return 1;
		if (op == '+' || op == '-')
			return 2;
		if (op == '*' || op == '/')
			return 3;
		return -1;
	}
}
